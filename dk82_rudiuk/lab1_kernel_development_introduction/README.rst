==========================================================
**Лабораторна робота №1. Введення в розробку модулів ядра.**
==========================================================


**Завдання:**
~~~~~~~~~~~~~
* зібрати мінімальний модуль Linux-ядра вручну;
* зібрати мінмальне Linux-оточення з використання BusyBox;
* зібрати перший модуль ядра;
* написати та зібрати власний модуль ядра :
    * при його підключенні, він виводить ім'я користувача передане в якості параметру модуля. Якщо параметр не задано, вивести попередження;
    * при виклику *exit_callback* модуля, щоб він виводив значення *jiffies* та час в секундах від *init* до *exit*.

**Хід роботи:**
~~~~~~~~~~~~~~~
За основу власного модуля взято демонстративний модуль ``firstmodule``.

**Використані бібліотеки**
--------------------------

* ``<linux/module.h>`` - потрібна для функціонуванн всіх модулів;
* ``<linux/kernel.h>`` - використовується для *sysinfo*;
* ``<linux/init.h>`` - використовується для ініціалізації та закриття;
* ``<linux/jiffies.h>`` - тут знаходиться лічильник та допоміжні функції.

**Використані макроси та функції**
----------------------------------

``MODULE_DESCRIPTION`` - макрос для опису модуля;

``MODULE_AUTHOR`` - автори модуля;

``MODULE_VERSION`` - версія модуля;

``MODULE_LICENSE`` - тип ліцензії;

``module_param`` - використовується для передачі параметрів в модуль;

``jiffies_delta_to_msecs`` - використовується для розрахунку проміжку часу. На вхід очікує різницю *jiffies*;

``printk`` - стандартний інструмент для друку повідомлень і, як правило, найпростіший спосіб відстеження і улагодження. По суті це все тей же `pritf`, який має функціональні відмінності;

``jiffies`` - глобальна змінна, яка містить кількість тактів, що сталися з моменту завантаження системи. 
При завантаженні ядро ініціалізує змінну до нуля, і вона збільшується на одиницю при кожному перериванні таймера. 

Висновки
~~~~~~~~

Було зібрано мінімальне ядро linux та набір user space утиліт, Емуляція поводилася з використанням qemu. В блоці нижче показано результати роботи модулю з передачею параметра ``user`` та без.
При передачі без параметра, виводиться відповідне сповіщення в лог ядра з рівнем ``KERN_WARNING`` та ім'ям користувача - ``$username``. Також при вигрузці модуля виводиться час його роботи в секундах.


.. code-block:: bash
 
 Без параметрів:
 /dev # insmod /mnt/mymod.ko
 [  100.859518] mymod: loading out-of-tree module taints kernel.
 [  100.897565] Module starts without username
 [  100.897622] Hello, $username!
 [  100.897622]  Jiffies = 4294768216
 З параметром:
 /dev # insmod /mnt/mymod.ko user='bohdan'
 [  589.346316] Hello, bohdan!
 [  589.346316]  Jiffies = 4295256665
 Вимкнення модуля:
 /dev # rmmod mymod
 [  609.129239] Long live the Kernel! Work time - 19 sec.
